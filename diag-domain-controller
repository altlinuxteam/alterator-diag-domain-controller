#!/bin/bash
# Copyright (C) 2024 Evgeny Sinelnikov <sin@altlinux.org>
# Copyright (C) 2024 Andrey Limachko <liannnix@altlinux.org>
# Copyright (C) 2024 Elena Dyatlenko <lenka@altlinux.org>
# Copyright (C) 2024 Sergey Savelev <savelevsa@basealt.ru>
#
# The Domain Controller Status Diagnostic Utility
#
# This program is free software: you can redistribute it and/or modify
#
# SPDX-License-Identifier: GNU GPL v3.0

set -euo pipefail

. shell-getopt
. shell-temp

PROG_NAME="${0##*/}"
VERSION="0.0.2"
global_retval=0
task_list="$*"
cmd="default"
current_date=$(date +"%Y-%m-%d_%H:%M")
temp_dir=
create_temporary temp_dir -d
journal="$temp_dir/report_$current_date.txt"
path_to_report_archive=
plain_mode=0

print_version() {
    cat <<EOF
$PROG_NAME version $VERSION
EOF
    exit 0
}

show_usage() {
    cat <<EOF
$PROG_NAME - The Domain Controller Status Diagnostic Utility

Usage: $PROG_NAME [options] [<diagnostic-task>]

Options:
    -l, --list			list of diagnostic tasks
    -V, --version		print program version and exit
    -v, --verbose               verbose output to terminal
    -r, --report=[file]         output to report file (optional file path)
    -h, --help                  show this text and exit
EOF
    exit 0
}

text_title="        Domain Controller Diagnostic Tool
-------------------------------------------------
Version: $VERSION
Date: $current_date
-------------------------------------------------
System information:
Kernel: $(uname -r)"

create_title() {
    if test "$cmd" == "report"; then
        echo "$text_title" >> "$journal"
    else
        echo "$text_title" 
    fi
}

task_func=
task_options=

for word in $task_list; do
    case "$word" in
        --*|-*)
            task_options="$task_options $word"
            ;;
        *)
            task_func="$task_func $word"
            ;;
    esac
done

if test -n "$task_func"; then
    task_options="$task_options -v"
    cmd="verbose"
fi

task_func="$(echo "$task_func" | tr ' ' '\n' | sort -u | tr '\n' ' ')"
task_func="$(echo "$task_func" | sed 's/[[:space:]]*//;s/[[:space:]]*$//')"
task_options="$(echo "$task_options" | tr ' ' '\n' | sort -u | tr '\n' ' ')"
task_options="$(echo "$task_options" | sed 's/[[:space:]]*//;s/[[:space:]]*$//')"

short_options="l,V,v,r::,h,p"
long_options="list,version,verbose,report::,help,plain"

TEMP=$(getopt -n "$PROG_NAME" -o "$short_options", -l "$long_options" -- "$@") || show_usage
eval set -- "$TEMP"

while :; do
    case "$1" in
        -l|--list)
            cmd="list"
            shift
            ;;
        -V|--version)
            print_version
            shift
            ;;
        -v|--verbose)
            cmd="verbose"
            create_title
            shift
            ;;
	-r|--report)
            cmd="report"
            create_title
            shift
            path_to_report_archive="${1#=}"
            shift
            ;;
        -p|--plain)
	    plain_mode=1
	    report_archive="$temp_dir/report_$current_date.tar.gz"
	    shift
	    ;;
        -h|--help)
            show_usage
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            fatal "Unrecognized option: $1"
            ;;
    esac
done

task_show() {
    local func="$1"
    echo "$func"
}

task_run() {
    local retval=126
    local func="$1"

    if test -n "$task_func" && test "$cmd" != "report"; then
	echo "$task_func" | tr ' ' '\n' | grep -q "^$func\$" || return 0
    fi

    $func && retval=0 || retval="$?"
    test $retval = 0 || global_retval=1

    return $retval
}

# Determining the test execution status
test_status() {
    local retval="$1"
    local task="$2"

    case "$retval" in
	0) echo "[DONE]: $task"
	    ;;
	1) echo "[FAIL]: $task"
	    ;;
	2) echo "[WARN]: $task"
	    ;;
	*) echo "[FAIL]: $task"
	    ;;
    esac
}

delimiter_line() {
    echo
    echo "================================================="
}

# Depending on the parameter of the cmd variable, the function decides what to run
task() {
    local task="$1"

    case "$cmd" in
	list)
	    task_show "$task"
	    ;;
	report)
	    local retval=0

	    delimiter_line >> "$journal"
            task_run "$task" >> "$journal" 2>&1 || retval="$?"
    	    delimiter_line >> "$journal"
            test_status "$retval" "$task" >> "$journal"
            ;;
	default)
	    local retval=0

	    task_run "$task" &> /dev/null || retval="$?"
	    test_status "$retval" "$task"
	    ;;
	verbose)
	    if test -z "$task_func" || grep -q "$task" <<< "$task_func"; then
		local retval=0
		delimiter_line
		task_run "$task" || retval="$?"
		delimiter_line
		test_status "$retval" "$task"
	    fi
	    ;;
	*)
	    fatal "Unrecognized command: $cmd"
	    ;;
    esac
}

# Checking the availability of writing general domain information
is_domain_info_available() {
    local retval=0

    /usr/bin/samba-tool domain info 127.0.0.1 &> /dev/null || retval=1

    if test "$retval" = 0; then
	echo -e "General information about the domain controller:\n"
	/usr/bin/samba-tool domain info 127.0.0.1
    else
	echo -e "Error:\n"
	/usr/bin/samba-tool domain info 127.0.0.1
    fi

    return $retval
}

# Checking the correct spelling of the domain name of the host
is_hostname_correct() {
    local retval=0

    hostname | grep "^[^.]*\..*" &> /dev/null || retval=1

    if test "$retval" = 0; then
	echo -e "The full domain name of the host (FQDN):\n"
	hostname
    else
	if test "$(echo -n $(hostname) | wc -c) -gt 15"; then
	    echo -e "hostname is long:\n"
	    hostname
	    retval=1
	else
	    echo -e "Error. Check the spelling of the domain name of the host:\n"
	    hostname
	fi
    fi

    return $retval
}

# Checking if the static and temporary hostname match
is_hostname_static_and_transient() {
    local retval=0
    local static_hostname=
    local transient_hostname=

    static_hostname="$(hostnamectl --static)" || retval=1
    transient_hostname="$(hostnamectl --transient)" || retval=1
    test "$static_hostname" = "$transient_hostname" || retval=2

    if test "$retval" = 0; then
        echo "The permanent hostname is the same as the temporary one. The host name is as follows: $static_hostname"
    elif test "$retval" = 2; then
        echo "The permanent hostname does not match the permanent one."
        echo "Static hostname: $static_hostname"
        echo "Transient hostname: $transient_hostname"
    else
        echo "The hostnamectl command could not be executed."
    fi

    return $retval
}

# Checking if the sysvol directory is empty
is_not_empty_sysvol() {
    local retval=0

    test -n "$(ls -A /var/lib/samba/sysvol 2> /dev/null)" || retval=2

    if test "$retval" = 0; then
	echo -e "The \"sysvol\" directory contains the following files (the first 10 files are presented):"
	ls -laA /var/lib/samba/sysvol

	for dir in $(ls -d /var/lib/samba/sysvol/*/ | head -n 10); do
	    dir_name="$(basename $dir)"

	    echo -e "\nListing for directory $dir_name (the first 10 files are presented):"
	    ls -laA "$dir" | head -n 10
	done
    else
	echo -e "Error. There may be no rights to view the\ndirectory, the directory does not exist,\nor the directory is empty."
    fi

    return $retval
}

# Checking for the samba package in the system
is_samba_package_installed() {
    local retval=0
    local heimdal_name=
    local mit_name=

    heimdal_name="samba-dc"
    mit_name="samba-dc-mitkrb5"

    rpm -q "$heimdal_name" &> /dev/null || rpm -q "$mit_name" &> /dev/null && retval=0 || retval=1

    if test "$retval" = 0; then
	if rpm -q "$heimdal_name" &> /dev/null ; then
	    echo -e "Basic information about the \"$heimdal_name\" package:\n"
	    rpm -qi "$heimdal_name"
	else
	    echo -e "Basic information about the \"$mit_name\" package:\n"
	    rpm -qi "$mit_name"
	fi
    else
	echo -e "Error. Perhaps the \"$heimdal_name\" package or \"$mit_name\" package is not installed"
    fi

    return $retval
}

# Checking whether the Samba service is running
is_samba_service_running() {
    local retval=0
    local service=

    service="samba.service"

    if test "$(systemctl is-active "$service")" = "active"; then
	echo -e "The \"$service\" service is running:\n"
	systemctl status "$service" | head -n3
	retval=0
    elif test "$(systemctl is-active "$service")" = "failed"; then
	echo -e "The service is not running, an error has occurred:\n"
	systemctl status "$service"
	retval=1
    elif test "$(systemctl is-enabled "$service")" = "disabled"; then
	echo -e "Warning. The service is not active:\n"
	systemctl status "$service"
	retval=2
    else
	echo -e "Error. Perhaps the service is missing:\n"
	systemctl status "$service"
	retval=1
    fi

    return $retval
}

# Checking for the presence of the krb5.conf configuration file and displaying the contents of the file
is_krb5_conf_file_exists() {
    local retval=0

    test -e /etc/krb5.conf || retval=1

    if test "$retval" = 0; then
        echo -e "The krb5.conf configuration file exists. Its contents are as follows:\n"
        ls -l /etc/krb5.conf
        echo
        cat /etc/krb5.conf
    else
        echo "The krb5.conf configuration file was not found."
    fi

    return $retval
}

# Checking for the presence of the smb.conf configuration file and displaying the contents of the file
is_smb_conf_file_exists() {
    local retval=0

    test -e /etc/samba/smb.conf || retval=1

    if test "$retval" = 0; then
        echo -e "The smb.conf configuration file exists. Its contents are as follows:\n"
        ls -l /etc/samba/smb.conf
        echo
        cat /etc/samba/smb.conf
    else
        echo "The smb.conf configuration file was not found."
    fi

    return $retval
}

# Checking the specified method of caching Kerberos tickets
is_there_way_to_cache_kerberos_tickets() {
    local retval=0
    local ccache=

    ccache="$(/usr/sbin/control krb5-conf-ccache)"

    test -n "$ccache" -a "$ccache" != "unknow" || retval=1
    test -n "$ccache" -a "$ccache" == "keyring" || retval=2

    if test "$retval" = 0; then
        echo "The following caching method is set: keyring."
    elif test "$retval" = 2; then
        echo "The caching method is set, it differs from the \"keyring\" method."
    else
        echo "The caching method is not specified."
    fi

    return $retval
}

# Checking: is the search for the kerberos domain name enabled via DNS
is_dns_lookup_kdc_enabled() {
    local retval=0

    if grep -q "^\s*dns_lookup_kdc\s*=\s*\([Tt][Rr][Uu][Ee]\|1\|[Yy][Ee][Ss]\)\s*$" /etc/krb5.conf; then
        echo "The dns_lookup_kdc parameter in file \"/etc/krb5.conf\" is enabled."
    else
        if grep -q "^\s*dns_lookup_kdc\s*=" /etc/krb5.conf; then
            echo "The dns_lookup_kdc parameter in file \"/etc/krb5.conf\" is disabled."
            retval=1
        else
            echo "The dns_lookup_kdc parameter in file \"/etc/krb5.conf\" is disabled by default."
            retval=2
        fi
    fi

    return $retval
}

# Checking for the presence of the resolv.conf configuration file and displaying the contents of the file
is_resolv_conf_file_exists() {
    local retval=0

    test -e /etc/resolv.conf || retval=1

    if test "$retval" = 0; then
        echo -e "The resolv.conf configuration file exists. Its contents are as follows:\n"
        ls -l /etc/resolv.conf
        echo
        cat /etc/resolv.conf
    else
        echo "The resolv.conf configuration file was not found."
    fi

    return $retval
}

# Checking whether the realm record in the krb5.conf configuration file matches one of the domain names in the resolv.conf configuration file
does_resolv_conf_and_default_realm_it_match() {
    local retval=2
    local search_line=
    local search_domains=
    local krb5_default_realm_line=
    local krb5_default_realm=
    local domains=
    local realm=

    if test -e /etc/resolv.conf; then
        search_line="$(grep "^search\s\+" /etc/resolv.conf || true)"
        search_domains="$(echo "$search_line" | sed -e 's/^search\s\+//' -e 's/\s\+$//')"
        domains=$(echo "$search_domains=" | tr '[:upper:]' '[:lower:]')

        echo "The following domain names are defined from the \"resolv.conf\" configuration file:"
        echo -e "$search_domains\n"
    else
        echo "The \"resolv.conf\" configuration file was not found."
        retval=1
    fi

    if test -e /etc/krb5.conf; then
        krb5_default_realm_line="$(grep "^\s*default_realm\s\+" /etc/krb5.conf || true)"
        krb5_default_realm="$(echo "$krb5_default_realm_line" | sed -e 's/^\s*default_realm\s*=\s*//' -e 's/\s*$//')"
        realm=$(echo "$krb5_default_realm=" | tr '[:upper:]' '[:lower:]')

        echo "The following realm entry has been defined from the \"krb5.conf\" configuration file:"
        echo -e "$krb5_default_realm\n"
    else
        echo -e "The \"krb5.conf\" configuration file was not found.\n"
        retval=1
    fi

    for domain in $domains; do
        test "$domain" = "$realm" && retval=0
    done

    if test "$retval" = 0; then
        echo "The realm entry from the \"krb5.conf\" file matches the domain name defined in the \"resolv.conf\" file."
    elif test "$retval" = 2; then
        echo "The realm entry from the \"krb5.conf\" file does not match any of the domain name entries in the \"resolv.conf\" file."
    fi

    return $retval
}

# Checking the correspondence of the domain entry in the krb5.conf configuration file to the realm entry in the smb.conf configuration file
does_smb_realm_and_krb5_default_realm_it_match() {
    local retval=0
    local smb_realm=
    local krb5_default_realm_line=
    local krb5_default_realm=
    local domains=
    local realm=

    if which testparm >/dev/null 2>&1; then
        smb_realm="$(testparm -l -v -s 2>/dev/null | grep "^\s*realm\s*=" | sed -e 's/^\s*realm\s*=\s*//' -e 's/\s*$//')"
        smb_realm="$(echo "$smb_realm" | tr '[:upper:]' '[:lower:]')"

	echo "The compliance of the realm record in smb.conf is checked using the testparm utility."

        if test -z "$smb_realm"; then
            echo -e "The realm record was not found in the \"smb.conf\" configuration file.\n"
            retval=2
        else
            echo "The following realm entry has been defined from the \"smb.conf\" configuration file:"
            echo -e "$smb_realm\n"

        fi
    else
        echo -e "The \"testparm\" command could not be executed.\n"
        retval=1
    fi

    if test -e /etc/krb5.conf; then
        krb5_default_realm_line="$(grep "^\s*default_realm\s\+" /etc/krb5.conf || true)"
        krb5_default_realm="$(echo "$krb5_default_realm_line" | sed -e 's/^\s*default_realm\s*=\s*//' -e 's/\s*$//')"
        krb5_default_realm="$(echo "$krb5_default_realm" | tr '[:upper:]' '[:lower:]')"

        echo "The following realm entry has been defined from the \"krb5.conf\" configuration file:"
        echo -e "$krb5_default_realm\n"
    else
        echo -e "The \"krb5.conf\" configuration file was not found.\n"
        retval=1
    fi

    test "$smb_realm" = "$krb5_default_realm" || retval=2

    if test "$retval" = 0; then
        echo "The realm entry from the \"krb5.conf\" configuration file is the same as the realm entry from the \"smb.conf\" configuration file."
    elif test "$retval" = 2; then
        echo "the realm entry from the \"krb5.conf\" configuration file does not match the realm entry from the \"smb.conf\" configuration file."
    fi

    return $retval
}

# Samba databases are checked for errors
are_there_errors_in_samba_databases() {
    local retval=0

    /usr/bin/samba-tool dbcheck &> /dev/null || retval=1

    if test "$retval" = 0; then
	echo -e "No errors were found in the Samba databases:\n"
	/usr/bin/samba-tool dbcheck
    else
	echo -e "Warning. There are no superuser rights or errors were found.\n"
	/usr/bin/samba-tool dbcheck
    fi

    return $retval
}

# Checking the activity of the ntp service
is_ntp_service_running() {
    local retval=0

    if test "$(timedatectl show -p NTP --value)" = "yes"; then
	echo -e "The NTP service is active:\n"
	timedatectl
	retval=0
    else
	echo -e "The NTP service is inactive:\n"
	timedatactl
	retval=2
    fi

    return $retval
}

# Checking if time synchronization is enabled
is_time_synchronization_enabled() {
    local retval=0

    timedatectl &> /dev/null || retval=1

    if test "$retval" = 1; then
        echo "An error occurred while executing the timedatectl command. Perhaps there is no such command."
    elif test "$(timedatectl show -p NTPSynchronized --value)" = "yes"; then
	echo -e "Syncing is enabled:\n"
	timedatectl
	retval=0
    else
	echo -e "Warning. Time synchronization is disabled:\n"
	timedatectl
	retval=2
    fi

    return $retval
}

task is_domain_info_available
task is_hostname_correct
task is_hostname_static_and_transient
task is_not_empty_sysvol
task is_samba_package_installed
task is_samba_service_running
task is_krb5_conf_file_exists
task is_smb_conf_file_exists
task is_there_way_to_cache_kerberos_tickets
task is_dns_lookup_kdc_enabled
task is_resolv_conf_file_exists
task does_resolv_conf_and_default_realm_it_match
task does_smb_realm_and_krb5_default_realm_it_match
task are_there_errors_in_samba_databases
task is_ntp_service_running
task is_time_synchronization_enabled

if test "$cmd" = "report"; then
    file_smb="/etc/samba/smb.conf"
    file_krb="/etc/krb5.conf"

    if test "$plain_mode" = 0; then
	report_archive="$TMP/report_$current_date.tar.gz"
    fi

    tar -czf "${report_archive}" \
        -C "$(dirname "$journal")" "$(basename "$journal")" \
        -C "$(dirname "$file_smb")" "$(basename "$file_smb")" \
        -C "$(dirname "$file_krb")" "$(basename "$file_krb")"

    if test -n "$path_to_report_archive"; then
        cp "${report_archive}" "$path_to_report_archive"
        echo "The archive with the report is saved along the way: $path_to_report_archive"
    else
        if test "$plain_mode" = 0; then
            echo "The archive with the report is saved as: $report_archive"
        else
            cat "${report_archive}"
        fi
    fi
fi

exit "$global_retval"
